import java.io.*;
import java.util.*;
class Node implements Comparable<Node>{
    int x;
    int y;
    int cost;
    Node(int x,int y, int cost){
        this.x = x;
        this.y = y;
        this.cost = cost;
    }
    @Override
    public int compareTo(Node o) {
        if(this.cost<o.cost)
            return -1;
        return 1;
    }
}
public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n=Integer.parseInt(st.nextToken()); // 노드의 수
        int m=Integer.parseInt(st.nextToken()); // 간선의 수
        int[] parent = new int[n+1]; //부모 테이블
        for(int i=1;i<=n;i++)
            parent[i]=i; //부모 테이블을 각자 노드로 초기화
        List<Node>list = new ArrayList<>();
        for(int i=0;i<m;i++){
            st = new StringTokenizer(br.readLine());
            int a=Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            int cost = Integer.parseInt(st.nextToken());
            list.add(new Node(a,b,cost));
        }
        Collections.sort(list);
        int result=0;
        for(int i=0;i<m;i++){
            Node node = list.get(i);
            if(find_root(node.x,parent)!=find_root(node.y,parent)){
                union(node.x,node.y,parent);
                result+=node.cost;
            }
        }
        System.out.print(result);
    }
    static void union(int a,int b,int[] parent){
        a=find_root(a,parent);
        b=find_root(b,parent);
        if(a<b)
            parent[b]=a;
        else parent[a]=b;
    }
    static int find_root(int x,int[] parent){
        if(parent[x]!=x)
            parent[x]= find_root(parent[x],parent);
        return parent[x];
    }

}