import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n=Integer.parseInt(st.nextToken()); // 노드의 수
        int m=Integer.parseInt(st.nextToken()); // 간선의 수
        int[] parent = new int[n+1]; //부모 테이블
        for(int i=1;i<=n;i++)
            parent[i]=i; //부모 테이블을 각자 노드로 초기화

        boolean cycle = false; //사이클 여부
        for(int i=0;i<m;i++){
            st=new StringTokenizer(br.readLine());
            int a=Integer.parseInt(st.nextToken());
            int b=Integer.parseInt(st.nextToken());
            if(find_root(a,parent)==find_root(b,parent)){
                cycle = true; //사이클 발생
                break;
            }
            else union(a,b,parent); //합집합 수행
        }
        if(cycle)
            System.out.print("사이클 발생");
        else System.out.print("사이클 미발생");
    }
    static void union(int a,int b,int[] parent){
        a=find_root(a,parent);
        b=find_root(b,parent);
        if(a<b)
            parent[b]=a;
        else parent[a]=b;
    }
    static int find_root(int x,int[] parent){
        if(parent[x]!=x)
            parent[x]= find_root(parent[x],parent);
        return parent[x];
    }

}