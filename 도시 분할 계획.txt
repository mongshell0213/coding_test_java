import java.io.*;
import java.util.*;

class Node implements Comparable<Node>{
    int a;
    int b;
    int cost; //시작,출발,비용
    Node(int a,int b, int cost){
        this.a=a;
        this.b=b;
        this.cost = cost;
    }
    public int compareTo(Node o){
        if(this.cost<o.cost)
            return -1;
        return 1;
    }
}
public class Main {
    public static int n,m;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n=Integer.parseInt(st.nextToken()); // 노드의 수
        m=Integer.parseInt(st.nextToken()); // 간선의 수
        int[] parent = new int[n+1];
        List<Node> list = new ArrayList<>();
        for(int i=0;i<=n;i++)
            parent[i]=i;
        for(int i=0;i<m;i++){
            st=new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            int cost = Integer.parseInt(st.nextToken());
            list.add(new Node(a,b,cost));
        }
        Collections.sort(list);
        int result=0;
        int last=0;
        for(int i=0;i<m;i++){
            Node node = list.get(i);
            if(find(node.a,parent)!=find(node.b,parent)) {
                union(node.a,node.b,parent);
                result+=node.cost;
                last=node.cost;
            }
        }
        System.out.print(result-last);
    }
    static void union(int a,int b,int[] parent){
        a=find(a,parent);
        b=find(b,parent);
        if(a<b)
            parent[b]=a;
        else parent[a]=b;
    }
    static int find(int a,int[] parent){
        if(parent[a]!=a)
            parent[a]=find(parent[a],parent);
        return parent[a];
    }
}