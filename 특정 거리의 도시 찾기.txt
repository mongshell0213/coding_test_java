import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

class Node{
    int node;
    int distance;
    Node(int node,int distance){
        this.node = node;
        this.distance = distance;
    }
}
public class Main {
    static List<ArrayList<Integer>> graph = new ArrayList<>();
    static List<Integer> resultList = new ArrayList<>();
    static StringBuilder sb = new StringBuilder();
    public static void main(String[] args) throws NumberFormatException,IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken()); // 도시의 개수
        int m = Integer.parseInt(st.nextToken()); // 도로의 개수
        int k = Integer.parseInt(st.nextToken()); // 거리 정보
        int x = Integer.parseInt(st.nextToken()); // 출발 도시

        for(int i=0;i<=n;i++)
            graph.add(new ArrayList<>());
        for(int i=0;i<m;i++){
            st = new StringTokenizer(br.readLine());
            int start = Integer.parseInt(st.nextToken());
            int end = Integer.parseInt(st.nextToken());
            graph.get(start).add(end);
        }

        bfs(x,n,k);

        if(resultList.size()==0)
            System.out.println(-1);
        else{
            Collections.sort(resultList);
            for(int i:resultList)
                sb.append(i).append('\n');
            System.out.println(sb);
        }
    }
    static void bfs(int startNode,int cityNum,int minDistance){
        int distance = 0;
        Queue<Node>queue = new ArrayDeque<>();
        boolean[] visited = new boolean[cityNum+1]; //1부터 시작해서 +1

        queue.offer(new Node(startNode,distance));
        visited[startNode]=true;

        while(!queue.isEmpty()){
            Node curNode = queue.poll();
            if(curNode.distance == minDistance){
                resultList.add(curNode.node);
            }
            else{
                List<Integer>nextNodes = graph.get(curNode.node);
                for(int i:nextNodes){
                    if(!visited[i]) {
                        queue.offer(new Node(i, curNode.distance + 1));
                        visited[i] = true;
                    }
                }
            }
        }
    }
}
