import java.io.*;
import java.util.*;

public class Main {
    public static ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
    static int[] indegree;
    static int[] time;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n= Integer.parseInt(br.readLine()); // 강의의 수
        indegree = new int[n+1];
        time = new int[n+1];
        for(int i=0;i<=n;i++)
            graph.add(new ArrayList<>());
        for(int i=1;i<=n;i++){
            StringTokenizer st = new StringTokenizer(br.readLine());
            boolean temp=false;
            while(true){
                if(!temp){
                    time[i]=Integer.parseInt(st.nextToken());
                    temp=true;
                }
                else{
                    int num=Integer.parseInt(st.nextToken());
                    if(num==-1)
                        break;
                    graph.get(num).add(i);
                    indegree[i]++;
                }
            }
        }
        topologySort();
    }
    static void topologySort(){
        int[] result = new int[time.length];
        for(int i=0;i< time.length;i++)
            result[i]=time[i];
        Queue<Integer>queue = new LinkedList<>();
        for(int i=1;i< result.length;i++){
            if(indegree[i]==0)
                queue.offer(i);
        }
        while(!queue.isEmpty()){
            int now = queue.poll();
            for(int i=0;i<graph.get(now).size();i++){
                result[graph.get(now).get(i)]=Math.max(result[graph.get(now).get(i)],result[now]+time[graph.get(now).get(i)]);
                indegree[graph.get(now).get(i)]--;
                if(indegree[graph.get(now).get(i)]==0)
                    queue.offer(graph.get(now).get(i));
            }
        }
        for(int i=1;i<result.length;i++)
            System.out.println(result[i]);
    }
}