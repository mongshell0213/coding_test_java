import java.io.*;
import java.util.*;

public class Main {
    public static int n,m;
    public static ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n=Integer.parseInt(st.nextToken()); // 노드의 수
        m=Integer.parseInt(st.nextToken()); // 간선의 수
        int[] indegree = new int[n+1];
        for(int i=0;i<=n;i++){
            graph.add(new ArrayList<Integer>());
        }
        for(int i=0;i<m;i++){
            st=new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            graph.get(a).add(b); //a에서 시작, b에 도착
            indegree[b]+=1;
        }
        topologySort(indegree);
    }
    static void topologySort(int[] indegree){
        ArrayList<Integer>result = new ArrayList<>(); //결과 저장
        Queue<Integer>queue = new LinkedList<>();
        for(int i=1;i<=n;i++){
            if(indegree[i]==0)
                queue.offer(i);
        }
        while(!queue.isEmpty()){
            int now=queue.poll();
            result.add(now);
            for(int i=0;i<graph.get(now).size();i++){
                indegree[graph.get(now).get(i)]--;
                if(indegree[graph.get(now).get(i)]==0)
                    queue.offer(graph.get(now).get(i));
            }
        }
        for(int i=0;i<result.size();i++)
            System.out.print(result.get(i)+" ");
    }
}